version: '3.8'
services:
  mongodb:
    image: mongo
    container_name: mongodb-container
    ports:
      - '27017:27017'
    environment:
      MONGO_INITDB_ROOT_USERNAME: asad
      MONGO_INITDB_ROOT_PASSWORD: asad
    networks:
      - app-network

networks:
  app-network:























# I understand your requirement. If you only want to run MongoDB in a Docker container without running your MERN application within Docker, you can follow these steps:

# 1. **Create a Docker Compose YAML File for MongoDB:**

#    Create a `docker-compose.yml` file in the root directory of your project. This file will define the MongoDB container.

#    ```yaml
#    version: '3.8'
#    services:
#      mongodb:
#        image: mongo
#        container_name: mongodb-container
#        ports:
#          - '27017:27017'
#        networks:
#          - app-network

#    networks:
#      app-network:
#    ```

#    Run the following command to start the MongoDB container:

#    ```bash
#    docker-compose up
#    ```

#    The MongoDB container will run and listen on port 27017.

# 2. **Creating a New Database and Collections:**

#    To create a new database and collections in the MongoDB container running in Docker, follow these steps:

#    - **Access the MongoDB Shell:**

#      Open a new terminal window and run the following command to access the MongoDB shell in the Docker container:

#      ```bash
#      docker exec -it mongodb-container mongo
#      ```

#    - **Create a New Database:**

#      Inside the MongoDB shell, you can create a new database using the following commands:

#      ```javascript
#      use mydatabase
#      ```

#      Replace `mydatabase` with the desired name for your new database.

#    - **Create Collections:**

#      Once you've switched to the new database, you can create collections by directly inserting data. For example:

#      ```javascript
#      db.todos.insertOne({ task: "Complete the tutorial", completed: false })
#      ```

#      This creates a collection named `todos` and inserts a document into it.

#    - **Query Data:**

#      You can query data from your collections using standard MongoDB queries:

#      ```javascript
#      db.todos.find()
#      ```

#    - **Exit the MongoDB Shell:**

#      To exit the MongoDB shell, type:

#      ```javascript
#      exit
#      ```

# 3. **Connecting Prisma to Dockerized MongoDB:**

#    In your Prisma configuration file (`schema.prisma`), update the URL to match the MongoDB container's hostname (`mongodb`) and the port (27017):

#    ```prisma
#    datasource db {
#      provider = "mongodb"
#      url      = "mongodb://mongodb:27017/mydatabase"
#    }
#    ```

#    Replace `mydatabase` with the name of the database you created in the MongoDB container.

# By following these steps, you'll have MongoDB running in a Docker container, and you can create new databases and collections using the MongoDB shell or your MERN application code connected through Prisma.

